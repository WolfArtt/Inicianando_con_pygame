
Un Sprite es un objeto visible en pantalla

Se pueden cargar imagenes con pygame.image.load("subdir/imagen.png")

Realiza las  operaciones con los sprites a traves de rectanhgulos(denominados rect) con coordenadas 

funcion blit sirve para dibujar una superficie sobre otra en la posicion que le indicamos mediante coordenadas

la esquina superior izquierda de la pantalla corresponde al punto (0,0)
y la esquina inferior derecha de la pantalla corresponde a las coordenadas (ancho,alto)
****************Hasta aca vimos todo hasta la parte 7****************


????????????????????????????????????????????????????????????????????????

                    ---video 8---

Comenzamos a ver los atributos de un rectangulo

Al agregar la bolita sin definir sus coordenadas se coloco en la posicion (0,0) de la pantalla 
Tomando como referencia la parte superior izquierda de la pantalla que corresponde a los atributos X Y 
Que a partir de ese punto se calcula su ancho en el eje X y su alto en el eje Y


Tambien se puede usar una tupla para establecer el tamanio
En la leccion de la bolita utilizamos el atributo centerx para centrar la bolita horizontalmente en pantalla
y el atributo centery para centrar verticamente en pantalla
No obstante podemos entrar con un solo atributo llamado center que recibe una tupla,
Ademas podemos posicionar utilizando cualquiera de los 4 lados:
verticalmente con top o bottom 
y horizontalmente con left o right
Se necesitan dos de estos atributos para posicionar el rectangulo:
por ejemplo top y right
Es importante mencionar que si especificas left o right solamente se usara el ultimo que se haya asignado lo mismo con top y bottom

Si quieres especificar la posicion con un solo punto usando una tupla(x,y)
tienes atrbutos para las 4 esquinas  topleft, topright, bottomleft y bottomright

Otros atributos utiles para centrar, que reciben una tupla(x,y) son los puntos al centro de cada uno de los lados:
midtop, midright,midbottom y midleft

como ves podemos posicionar nuestro rectangulo de varias maneras solo recuerda:
que hay algunos atributos que reciben un solo numero y otros que esperan una tupla

        Escalares           Tuplas
        _________           _________
        x                   size
        y                   center
        width(ancho)        topleft
        height(alto)        topright
        centerx             bottomleft
        centery             bottomright
        top                 midtop
        right               midright
        bottom              midleft
        left                midbottom

#########################################################################################

---Coliciones video 9---

Para que haya coliciones debe haber movimiento
- Volvemos al constructor de bolita y agregamos la velocidad
        self.speed [x,y]
    como una lista que indica cuantos pixeles se movera en x y cuantos en Y
- Despues definimos el metodo:
        def update(self)
    cuya tarea sera mover la bolita hacia la nueva posicion,
    en base a su posicion actual, y su velocidad con la: funcion move_ip

- Dentro del ciclo, antes de dibujar la bolita mandamos a llamar al metodo: update de la bolita
    Despues de hacer correr nuestro script vemos tres  cosas:
        1. el movimiento ocurrio muy rapido, pues dejo una linea amarilla
        2. por que? hay una linea amarilla
        3. donde esta la bolita? por que se va y no regresa?
    Explicando:
        1.  El movimiento ocurrio muy rapido pues ocurre a la velocidad que puede [procesarlo la computadora
                * Para monitorear el tiempo del juego pygame ofrece un objeto reloj
                    pygame.time.Clock()
                Ya que tenemos el reloj podemos establecer los frames por segundo justo al inicio de nuestro ciclo infinito
                con el metodo: reloj.tick(60)
                este 60 quiere decir que nuestro juego correra como maximo 60 veces por segundo
                Ya podemos observar como se va construyendo la estela de nuestra bolita
        2.  La linea amarilla aparece por cada bolita dibujada a travez del tiempo
            lo que podemos hacer es rellenar la pantalla de algun color y sobre la pantalla limpia volver a dibujar los demas elementos
            primero creamos un color en formato RGB junto con las demas variables al inicio del archivo
            y antes de dibujar la bolita rellenamos la pantalla con el metodo:
                pantalla.fill(color_que_queremos) 
            Al ejecutar de nuevo tenemos una pantalla con fondo azul y una bolita que no deja rastro
        3.  La bolita se va y no regresa para evitar esto debemos invertir la velocidad de 'y'
            cuando la parte inferior de la bolita sea mayor que el ancho de la pantalla
            esto lo hacemos en la funcion update de la bolita comparando el bottom con el alto de pantalla
            * Cuando hacemos correr de nuevo nuestra consola la bolita ya no se sale de la pantalla por abajo(Bottom) 
                si no que ahora se sale por la parte derecha de la pantalla
            * Asi que aplicamos la misma logica, que usamos para evitar que se salga por la pantalla de abajo
            * Para evitar la fuga de la bolita por arriba debemos invertir la velocidad como antes 
                por lo que podemos aniadir la compracion del top <= 0 en la primera condicion
                y hacemos lo mismo para evitar la fuga de la bolita por la izquierda asi que aplicamos la compracion de <= 0

        Y asi solucionamos nuestros primeros errores de colisiones para nuestro Juego :3


#########################################################################################


--- El jugador y su movimiento video 10---

Crearemos la paleta del jugador y la moveremos con las  flechas del teclado

Nos creamos la clase paleta 
La paleta la colocamos centrada en eje x y 20 pixeles sobre el borde inferior de la pantalla
con el atributo:    self.rect.mibottom=(ancho/2, alto -20)
Como por el momento el jugador no se movera la velocidad sera de [0,0]
Luego dibujamos la paleta del jugador en pantalla

Ahora vamos a nuestro ciclo de eventos y agregamos un elif para buscar eventos por teclado dados como un argumento
Luego nos vamos a nuestra clase paleta y creamos nuestra funcion update y recibe como parametro eventos
el evento tiene el atributo key (que nos permite saber que tecla fue presionada)
si se presiono la flecha izquierda establecemos la velocidad en(-5,0)
en caso de que se presione la flecha derecha establecemos la velocidad en (5,0)
con la linea de codigo siguiente: 
        * self.speed = [5,0]
copiamos el metodo -self.rect.move_ip(self.speed)- de la clase bolita en nuestra clase paleta.

Ya movemos la paleta por pantalla pero solo una vez, tenemos que soltar y volver a precionar para continuar el movimiento de la paleta.
Ajustaremos la repeticion del evento de tecla presionada con el metodo:
        * pygame.key.set_repeat(30)     30 = al retraso de la repeticion en milisegundos entre cada repeticion(podemos cambiar el nro escalar a otro que queramos)

Para evitar que la paleta salga de la pantalla nos vamos a  nuestra clase paleta en la funcion update
    y en nuestro if le agregamos que si va a llado izquierdo siempre sea mayor a 0. Es decir que si es menor a cero ya no pasara la pantalla
    al elif agregamos que si va a la derecha siempre sea menor al ancho(ancho de la pantalla)

### EN ESTA LECCION APRENDIMOS ###

    Que hay un tipo de evento llamado pygame.KEYDOWN que se produce al precionar una tecla
    y su evento tiene un atributo llamado key para saber que tecla fue precionada
    y se puede generar el evento KEYDOWN cada cierto tiempo si configuramos el retraso con: 
        * pygame.key.set_repeat(retaso_ms)


##################################################################################################################################################################################


--- Comienzamos a hacer el muro ---

Comenzamos clonando la clase bolita y le cambiamos el nombre a la clase a Ladrillo
borramos las coordenadas en donde apareceran los ladrillos, y tambien la velocidad
Luego nos creamos una nueva clase llamada Muro() y dentro creamos constructores de la clase ladrillos
hacemos la prueba colocando dos ladrillos en las coodenadas(0,0) y el otro en las coordenadas(100,100)
Haremos el muro de ladrillos con un for, llamando a la clase ladrillos
hacemos que nuestros ladrillos se acomoden horizontalmente y verticalmente en la pantalla